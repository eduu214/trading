# Docker Compose for AlphaStrat Trading Platform

services:
  postgres:
    image: timescale/timescaledb-ha:pg16
    container_name: alphastrat-postgres
    environment:
      POSTGRES_DB: alphastrat
      POSTGRES_USER: alphastrat
      POSTGRES_PASSWORD: alphastrat_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alphastrat"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: alphastrat-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alphastrat-backend
    environment:
      DATABASE_URL: postgresql://alphastrat:alphastrat_dev_password@postgres:5432/alphastrat
      REDIS_URL: redis://redis:6379
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alphastrat-celery-worker
    environment:
      DATABASE_URL: postgresql://alphastrat:alphastrat_dev_password@postgres:5432/alphastrat
      REDIS_URL: redis://redis:6379
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      ENVIRONMENT: development
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app worker --loglevel=info

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alphastrat-celery-beat
    environment:
      DATABASE_URL: postgresql://alphastrat:alphastrat_dev_password@postgres:5432/alphastrat
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: development
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app beat --loglevel=info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: alphastrat-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
      NEXT_PUBLIC_WS_URL: ws://backend:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data: